import toolutils
import soptoolutils
null_to_select=hou.node("obj/null1")
#func to create dust

def walkdust(geo):

    #create node in geo
    hou.hda.installFile("/SCORPION/PYTHON/WALK_DUST/FINAL_CODE/DUST_PARMS.otl")                      
    trns1=geo.createNode("xform")
    ts1=geo.createNode("timeshift")
    ts2=geo.createNode("timeshift")
    merge_ts=geo.createNode("merge")
    bound=geo.createNode("bound")
    boxlater=geo.createNode("box")
    blast=geo.createNode("blast")
    trns2=geo.createNode("xform")
    trns3=geo.createNode("xform")
    ground=geo.createNode("null","GROUND")
    fluidcont=geo.createNode("null","FLUID_CONTAINER")
    gsubd=geo.createNode("subdivide")
    gcolor=geo.createNode("color")
    wcolor=geo.createNode("color")
    attrbtransfer=geo.createNode("attribtransfer")
    delete=geo.createNode("delete")
    scatter=geo.createNode("scatter")
    polyxtrd=geo.createNode("polyextrude")
    vdbpolygn=geo.createNode("vdbfrompolygons")
    attrbcreate=geo.createNode("attribcreate")
    nullvdb=geo.createNode("null","VDB")
    nullfluidemitter=geo.createNode("null","FLUID_EMITTER")
    ptjittr=geo.createNode("pointjitter")
    add=geo.createNode("add")
    ray=geo.createNode("ray")
    nullray=geo.createNode("null")
    merge_color_nullray=geo.createNode("merge")
    fluidcolor=geo.createNode("color")
    fluidsource=geo.createNode("fluidsource")    
    
                
    #set input for nodes
                                        
    trns1.setInput(0,node)
    ts1.setInput(0,trns1)
    ts2.setInput(0,trns1)
    merge_ts.setInput(0,ts1)
    merge_ts.setInput(1,ts2)
    boxlater.setInput(0,merge_ts)
    bound.setInput(0,merge_ts)
    geo.layoutChildren()
    blast.setInput(0,bound)
    trns2.setInput(0,boxlater)
    trns3.setInput(0,blast)
    fluidcont.setInput(0,trns2)
    ground.setInput(0,trns3)
    geo.layoutChildren()
    gsubd.setInput(0,ground)
    gcolor.setInput(0,gsubd)
    wcolor.setInput(0,trns1)
    attrbtransfer.setInput(0,gcolor)
    geo.layoutChildren()
    attrbtransfer.setInput(1,wcolor)
    delete.setInput(0,attrbtransfer)
    scatter.setInput(0,delete)
    polyxtrd.setInput(0,ground)
    geo.layoutChildren()
    vdbpolygn.setInput(0,polyxtrd)
    attrbcreate.setInput(0,polyxtrd)
    nullvdb.setInput(0,vdbpolygn)
    geo.layoutChildren()
    nullfluidemitter.setInput(0,scatter)
    ptjittr.setInput(0,nullfluidemitter)
    fluidcolor.setInput(0,ptjittr)
    ray.setInput(0,add)
    ray.setInput(1,gsubd)
    nullray.setInput(0,ray)
    merge_color_nullray.setInput(0,fluidcolor)
    merge_color_nullray.setInput(1,nullray)
    fluidsource.setInput(0,merge_color_nullray)          
    
    
    
    
    #SETTING PARAMETER
    
    ts1frame=ts1.parm("frame")
    ts1frame.setExpression("$RFSTART")
    ts2frame=ts2.parm("frame")
    ts2frame.setExpression("$RFEND")
    blastgptype=blast.parm("grouptype")
    blastgptype.set(4)
    blastgroup=blast.parm("group")
    blastgroup.set("4")
    blastdelete=blast.parm("negate")
    blastdelete.set(1)
    trns2pivot=trns2.parmTuple("p")
    trns2pivot[0].setExpression("$CEX")
    trns2pivot[1].setExpression("$CEY")
    trns2pivot[2].setExpression("$CEZ")
    trns2uscale=trns2.parm("scale")
    trns2uscale.set(1.5)
    trnstrnslate=trns2.parmTuple("t")
    trns3pivot=trns3.parmTuple("p")
    trns3pivot[0].setExpression("$CEX")
    trns3pivot[1].setExpression("$CEY")
    trns3pivot[2].setExpression("$CEZ")
    trns3uscale=trns3.parmTuple("s")
    trns3uscale[0].set(2)
    trns3uscale[1].set(1)
    trns3uscale[2].set(2)
    gsubddepth=gsubd.parm("iterations")
    gsubddepth.set(8)
    gcolorvals=gcolor.parmTuple("color")
    gcolorvals[0].set(0)
    gcolorvals[1].set(0)
    gcolorvals[2].set(0)
    wcolorvals=wcolor.parmTuple("color")
    wcolorvals[0].set(0.9)
    wcolorvals[1].set(0)
    wcolorvals[2].set(0)
    attrbtrnprim=attrbtransfer.parm("primitiveattribs")
    attrbtrnprim.set(0)
    attrbpoint=attrbtransfer.parm("pointattriblist")
    attrbpoint.set("Cd density")
    attrbthrs=attrbtransfer.parm("thresholddist")
    attrbthrs.set(.2)
    deleteopon=delete.parm("negate")
    deleteopon.set(1)
    deleteentity=delete.parm("entity")
    deleteentity.set(1)
    deleteopty=delete.parm("groupop")
    deleteopty.set(2)
    deleteex=delete.parm("filter")
    deleteex.setExpression("$CR>0")
    scattercount=scatter.parm("npts")
    scattercount.set(500)
    xtrddist=polyxtrd.parm("dist")
    xtrddist.set(.2)
    xtrudoutbk=polyxtrd.parm("outputback")
    xtrudoutbk.set(1)
    vdbplygnvoxelsize=vdbpolygn.parm("voxelsize")
    vdbplygnvoxelsize.set(0.05)
    attrbcreatename=attrbcreate.parm("name1")
    attrbcreatename.set("doppath")
    attrbcreateclass=attrbcreate.parm("class1")
    attrbcreateclass.set(0)
    attrbcreatetype=attrbcreate.parm("type1")
    attrbcreatetype.set(3)
    ptjittrscale=ptjittr.parm("scale")
    ptjittrscale.set(0.1)
    ptjittraxisscale=ptjittr.parmTuple("axisscale")
    ptjittraxisscale[1].set(2)
    add_usept=add.parm("usept0")
    add_usept.set(1)
    add_pt=add.parmTuple("pt0")
    add_pt[0].setExpression('centroid("/obj/dust_emitter/transform1",D_X)')
    add_pt[1].setExpression('centroid("/obj/dust_emitter/transform1",D_Y)')
    add_pt[2].setExpression('centroid("/obj/dust_emitter/transform1",D_Z)')
    ray_dir=ray.parmTuple("dir")
    ray_dir.deleteAllKeyframes()
    ray_dir[1].set(-1)
    fluidsourcemthd=fluidsource.parm("method")
    fluidsourcemthd.set(1)
    fluidsourcedivsize=fluidsource.parm("divsize")
    fluidsourcedivsize.set(0.05)
    fluidsource_velchk=fluidsource.parm("vel_add_uniform")
    fluidsource_velchk.set(1)
    fluidsource_vel=fluidsource.parmTuple("vel_uniformvel")
    fluidsource_vel[2].set(.3)
    fluidsource_curl=fluidsource.parm("vel_add_curl_noise")
    fluidsource_curl.set(1)
    
    
    
    
    #dopnetwork creation
    
    dopntwk=geo.createNode("dopnet")
    dopio=geo.createNode("dopio","DOPIO")
    outnode=dopntwk.children()
    stobjdustemitter=dopntwk.createNode("staticobject","dust_emitter")
    mrgaftstobj=dopntwk.createNode("merge")
    mrgstobjandgas=dopntwk.createNode("merge")
    stsolver=dopntwk.createNode("staticsolver")
    gasresizefluiddy=dopntwk.createNode("gasresizefluiddynamic")
    smokeobj=dopntwk.createNode("smokeobject")
    sourcevol=dopntwk.createNode("sourcevolume")
    pyrosol=dopntwk.createNode("pyrosolver::2.0")
    
    
    #dopnet set input
    
    mrgaftstobj.setInput(0,stobjdustemitter)
    mrgstobjandgas.setInput(0,stsolver)
    mrgstobjandgas.setInput(1,pyrosol)
    stsolver.setInput(0,mrgaftstobj)
    pyrosol.setInput(0,smokeobj)
    pyrosol.setInput(1,gasresizefluiddy)
    pyrosol.setInput(4,sourcevol)
    outnode[0].setInput(0,mrgstobjandgas)
   
    
    #dopnet set value 
    
    sourcevol_srcpath=sourcevol.parm("source_path")
    fluidpath=fluidsource.path()
    strfluidpath=str(fluidpath)
    sourcevol_srcpath.set(strfluidpath)
    sourcevol_velmrg=sourcevol.parm("velocity_merge")
    sourcevol_velmrg.set(1)
    gasresizetrackobj=gasresizefluiddy.parm("use_tracking_objects")
    gasresizetrackobj.set(1)
    gasresizetracksrc=gasresizefluiddy.parm("tracking_source")
    gasresizetracksrc.set(0)
    gasresizetrackpth=gasresizefluiddy.parm("tracking_path")
    gasresizetrackpth.set(strfluidpath)
    gasresizefldcutoff=gasresizefluiddy.parm("field_cutoff")
    gasresizefldcutoff.set(.1)
    pyro_dissipation=pyrosol.parm("evap")
    pyro_dissipation.set(0.16)
    pyro_combustion=pyrosol.parm("enable_combustion")
    stobj_objpth=stobjdustemitter.parm("objpath")
    f=geo.path()
    g=str(f)
    stobj_objpth.set(f)
    stobj_soppath=stobjdustemitter.parm("soppath")
    l=attrbcreate.path()
    m=str(l)
    stobj_soppath.set(m)
    stobj_trsm=stobjdustemitter.parm("usetransform")
    stobj_trsm.set(1)
    stobj_mode=stobjdustemitter.parm("mode")
    stobj_mode.set(6)
    stobj_unfmvox=stobjdustemitter.parm("uniformvoxels")
    stobj_unfmvox.set(5)
    stobj_div=stobjdustemitter.parm("divsize")
    stobj_div.set(1.5)
    stobj_proxyvol=stobjdustemitter.parm("proxyvolume")
    q=nullvdb.path()
    r=str(q)
    stobj_proxyvol.set(r)
    
    
    
    
    
    
    
    smkobjdiv=smokeobj.parm("divsize")
    smkobjdiv.set(0.05)
    smkobjsize=smokeobj.parmTuple("size")
    smkobjsize[0].setExpression('bbox("../../FLUID_CONTAINER",D_XSIZE)')
    smkobjsize[1].setExpression('bbox("../../FLUID_CONTAINER",D_YSIZE)')
    smkobjsize[2].setExpression('bbox("../../FLUID_CONTAINER",D_ZSIZE)')
    smkobjt=smokeobj.parmTuple("t")
    smkobjt[0].setExpression('centroid("../../FLUID_CONTAINER",D_X)')
    smkobjt[1].setExpression('centroid("../../FLUID_CONTAINER",D_Y)')
    smkobjt[2].setExpression('centroid("../../FLUID_CONTAINER",D_Z)') 
    dopiopath=dopio.parm("doppath")
    dopntpath=dopntwk.path()
    dopntpthstr=str(dopntpath)
    dopiopath.set(dopntpthstr)
    dopionode=dopio.parm("dopnode")
    smkobjpth=smokeobj.path()
    smkobjpthstr=str(smkobjpth)
    dopionode.set(smkobjpthstr)
    dopioprsts={"node":dopio, "script_value0":"pyro"}
    dopio.hm().invokePresetMenu(dopioprsts) 
    
    
    #display ON
    dopio.setDisplayFlag(True)
    
    #layout
    
    geo.layoutChildren()
    dopntwk.layoutChildren()
#check selection

x=hou.selectedNodes()
if len(x)<1:
    hou.ui.displayMessage("please select a node")
else:
    for node in x:
        if node.type().name()!="object_merge":
            hou.ui.displayMessage("wrong node selected\nplease select an object_merge")
        else:
            if node.type().name()=="object_merge":
                parentnode=node.parent()    
                walkdust(geo=parentnode)
                parentnode.setDisplayFlag(True)
                if parentnode.name()!="dust_emitter":
                    parentnode.setName("dust_emitter")
            
null_to_select.setSelected(True,True,True) 
